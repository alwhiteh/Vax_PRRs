---
title: "Vax_PRRs"
author: "Alex Whitehead"
format: pdf
execute:
  echo: FALSE
---

```{r}
#| label: load-packages
#| echo: FALSE
library(renv)
library(ggplot2)
library(dplyr)
library(stringr)
library(Seurat)
library(SeuratObject)
library(R.utils)
library(data.table)
library(glmGamPoi) #makes SCTransform Faster
library(pheatmap)
library(reticulate)
library(scater)
library(SeuratDisk)
library(limma)
library(biomaRt)
library(dplyr)
library(purrr)
library(anndata)
library(tidyverse)

# for Seurat 5 
library(Seurat)
library(SeuratWrappers)
library(EnsDb.Hsapiens.v86)
library(Azimuth)
library(BPCells)
options(future.globals.maxSize = 1e9)
options(Seurat.object.assay.version = "v5")
```

# We need to map the mouse genes to human orthologs in order to be able to combine the datasets. This requires changing the feature names prior to generating the Seurat Object. We will then generate mouse, human, and mouse as human objects.

```{r}
#| label: Replace murine genes with human orthologs
#| echo: FALSE

# We will adapt the code published here: https://github.com/Functional-Genomics/CrossSpeciesIntegration/blob/main/bin/concat_by_homology_multiple_species_by_gene_id.R

# Generate the mouse to human mapping dataframe
# Set the biomaRt version we will be using, here we will use 108
species1 = "hsapiens" # this is the species we want to map everything to
mart <- useEnsembl("ensembl", version = "108", dataset = "hsapiens_gene_ensembl")

# get genes in the main chrs of the first species
genes_species_1 <- getBM(attributes = c("ensembl_gene_id", "external_gene_name", "chromosome_name"), mart = mart)

# Find the Ensembl attributes related to mouse "homo"logues of human genes
avail_attributes <- listAttributes(mart) %>% 
  dplyr::filter(grepl("mmusc", name)) %>% 
  dplyr::filter(grepl("homo", name)) %>%
  dplyr::filter(!grepl("Query protein or transcript ID", description))

# Generate the homology table
# This maps mouse to human genes
homology_tbl <- getBM(attributes = c("ensembl_gene_id", 
                                    "external_gene_name", 
                                    "chromosome_name", 
                                    "start_position", 
                                    "end_position", 
                                    avail_attributes$name), 
                     mart = mart, filters = "ensembl_gene_id",
                     values = genes_species_1[["ensembl_gene_id"]])
#write.csv(homology_tbl, file = "human_mouse_homology_tbl.csv")

#Filter to get all the one-to-one mapping homologues
species_1 = "mmusculus" #select the species we want the human ortholog of
one2one = homology_tbl %>% 
  filter_at(vars(ends_with("homolog_orthology_type")), all_vars(. == 'ortholog_one2one')) %>%
  distinct(get(paste0(species_1, "_homolog_ensembl_gene")), `.keep_all` = TRUE)
print(dim(one2one)) #1709 by 19 

# Build a many to many mapping object, using orthologs with better wga mapping
# In order we care about: orthology confidence, goc scores, wga coverage
many2many = homology_tbl %>% filter_at(vars(ends_with("homolog_orthology_type")), 
                                       all_vars(. != 'ortholog_one2one'))
many2many = many2many %>% filter(!is.na(get(paste0(species_1, "_homolog_ensembl_gene"))) & get(paste0(species_1, "_homolog_ensembl_gene")) != "")
#print(dim(many2many)) #8843 by 18
many2many_copy <- many2many %>% rowid_to_column("index")

# Combine the one-to-one mappings with the high homology many-to-many mappings
order = c("mmusculus")
avail_ordered = c() # initialize variable
for (attr in c("orthology_confidence", "homolog_goc_score", "homolog_wga_coverage")){

    avail_homo = c(avail_attributes$name[grepl(attr, avail_attributes$name)])

    for (i in seq(1, length(order))){
   avail_ordered = c(avail_ordered, avail_homo[grepl(order[i], avail_homo)])
  }
}
avail_homo = avail_ordered
many2many_copy_homo <- many2many %>% rowid_to_column("index")
i <- 1
many2many_most_homo = data.frame()

while (nrow(many2many_copy_homo) > 0) {
  dd <- many2many_copy_homo %>%
        filter(get(paste0(species_1, "_homolog_ensembl_gene"))  == levels(factor(many2many_copy_homo[[paste0(species_1, "_homolog_ensembl_gene")]]))[1])
  
  genes_now = dd %>% dplyr::select(ends_with("_homolog_ensembl_gene")) %>% flatten() %>% unique() %>% as.character()

  gene_group <- many2many_copy_homo %>%
        dplyr::filter_at(vars(ends_with("_homolog_ensembl_gene")), any_vars(. %in% genes_now))

    if(nrow(gene_group) == 1) {
        gene_keep = gene_group
    } else {
    gene_keep = gene_group %>%
        dplyr::arrange(
        sapply(avail_homo, FUN = function(x) get(x)) ## keep the member of group with highest overall confidence
        ) %>%
            dplyr::slice(n())
    }
    many2many_copy_homo <- many2many_copy_homo %>%
            filter(!index %in% gene_group$index)
    many2many_most_homo[i,1:length(gene_keep)] <- gene_keep
    i <- i+1

}
# Combine the many-to-many and one-to-one to make a master conversion table
conv_table <- rbind(one2one[-19], many2many_most_homo[-1])
write.csv(conv_table, "human_to_mouse_homology_table.csv")

#conv_table <- read.csv("human_to_mouse_homology_table.csv")

########## Replace murine values with human orthologs #########
### test case
#mouse_genes <- as.data.frame(c("Ms4a1","Dcn","Postn","Col1a2"))
#colnames(mouse_genes) <- c('gene')

# Left join our gene list with the conversion table
#test <- mouse_genes %>%
# left_join(conv_table, by = c('gene' = "mmusculus_homolog_associated_gene_name"))

# Now replace the gene names based on the corresponding human genes
#gene <- test2$external_gene_name # since the order will be the same

# # After trying several ways of renaming the Seurat genes, the object always broke, so we will do this at the beginning, when rendering the Seurat objects. 
# # We will test this using the Koenitzer3 data
# data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE145998/Koenitzer3/filtered_feature_bc_matrix")
# mouse_genes <- as.data.frame(rownames(data))
# colnames(mouse_genes) <- c("gene")
# filt_conv_table <- conv_table %>%
#   filter(conv_table$mmusculus_homolog_associated_gene_name %in% mouse_genes$gene)
# merg_conv_table <- mouse_genes %>%
#   left_join(filt_conv_table, by = c("gene" = "mmusculus_homolog_associated_gene_name"))
# merg_conv_table <- merg_conv_table[!duplicated(merg_conv_table$gene),]
# merg_conv_table$external_gene_name[merg_conv_table$external_gene_name==""] <- NA
# merg_conv_table <- merg_conv_table %>% 
#     mutate(external_gene_name = coalesce(external_gene_name,gene)) 
# merg_conv_table$external_gene_name <- make.unique(merg_conv_table$external_gene_name)
# 
# length(unique(merg_conv_table$gene)) #32285
# length(unique(merg_conv_table$external_gene_name)) #31518 without make.unique
# rownames(data) <- merg_conv_table$external_gene_name


# # Now make Seurat Object like normal
# m_lung_koenitzer3 <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_koenitzer3")
# m_lung_koenitzer3$author <- "koenitzer"
# saveRDS(m_lung_koenitzer3, "m_lung_koenitzer3.RDS")
# # Do normal preprocessing and make sure it works
# m_lung_koenitzer3[["percent.mt"]] <- PercentageFeatureSet(m_lung_koenitzer3, pattern = "^MT-")
# m_lung_koenitzer3 <- SCTransform(m_lung_koenitzer3, vars.to.regress = "percent.mt")
# m_lung_koenitzer3 <- FindVariableFeatures(m_lung_koenitzer3, selection.method = "vst", nfeatures = 2000)
# #m_lung_koenitzer3.all.genes <- rownames(m_lung_koenitzer3)
# #m_lung_koenitzer3 <- ScaleData(m_lung_koenitzer3, features = m_lung_koenitzer3.all.genes)
# m_lung_koenitzer3 <- RunPCA(m_lung_koenitzer3, features = VariableFeatures(object = m_lung_koenitzer3), npcs = 30)
# m_lung_koenitzer3 <- RunUMAP(m_lung_koenitzer3, reduction = "pca", dims = 1:30)
# m_lung_koenitzer3 <- FindNeighbors(m_lung_koenitzer3, reduction = "pca", dims = 1:30)
# m_lung_koenitzer3 <- FindClusters(m_lung_koenitzer3, resolution = 0.5)
# m_lung_koenitzer3.markers <- FindAllMarkers(m_lung_koenitzer3, logfc.threshold = 0.5, min.pct = 0.6, only.pos = T)
# DimPlot(m_lung_koenitzer3, label = T)
```

## Now that we know the operations, let's format them as a function that will take a vector of gene characters and output mapped homologs using one-to-one and many-to-many

```{r}
#| label: Define function to replace murine genes with human orthologs
#| echo: FALSE

conv_table <- read.csv("human_to_mouse_homology_table.csv")

mouse_to_human <- function(mouse_genes, conversion_table) {
  mouse_genes <- as.data.frame(mouse_genes)
  colnames(mouse_genes) <- c("gene")
  filt_conv_table <- conv_table %>%
   filter(conv_table$mmusculus_homolog_associated_gene_name %in% mouse_genes$gene)
  merg_conv_table <- mouse_genes %>%
    left_join(filt_conv_table, by = c("gene" = "mmusculus_homolog_associated_gene_name"))
  merg_conv_table <- merg_conv_table[!duplicated(merg_conv_table$gene),]
  merg_conv_table$external_gene_name[merg_conv_table$external_gene_name==""] <- NA
  merg_conv_table <- merg_conv_table %>% 
    mutate(external_gene_name = coalesce(external_gene_name,gene)) 
  mapped_genes <- as.data.frame(make.unique(merg_conv_table$external_gene_name))
  colnames(mapped_genes) <- c("human_ortho")
  return(mapped_genes)
}

# Make sure the function works
#test <- mouse_to_human(rownames(data), conv_table)
```

## We need to assemble the data into Seurat Objects, which we can then just load later. The following code chunks will generate the objects. After saving the seurat objects, they can be merged using the CHTC scripts.

```{r}
#| label: download and read in data from Teichmann: Human Cell Atlas
#| echo: FALSE
# https://cells.ucsc.edu/?ds=teichmann-asthma+lung-atlas
# Note, these cells are all from healthy donors
# We will do this for epithelial and nonepithelial sets, then split by location
# Then we will save the Seurat objects for easy loading
mat <- fread("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/EGAS00001002649/teich_epi_data.tsv.gz")
meta <- read.table("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/EGAS00001002649/teich_epi_meta.tsv", header=T, sep="\t", as.is=T, row.names=1)
genes = mat[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(mat[,-1], row.names=genes)
colnames(mat) <- gsub('[.]', '-', colnames(mat))
# Mat has the problem where some of the columns start with an "X", and we need to remove those
mat %>% select(starts_with("X")) -> broken
mat %>% select(!starts_with("X")) -> acceptable
colnames(broken) <- str_sub(colnames(broken),2)
fixed <- cbind(broken,acceptable)
teich_epi<- CreateSeuratObject(counts = fixed, project = "Teich_epi", meta.data=meta)
saveRDS(teich_epi, "Teich_epi.RDS")

# Repeat this process for the non-epithelial cell types
mat <- fread("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/EGAS00001002649/teich_non_epi_data.tsv.gz")
meta <- read.table("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/EGAS00001002649/teich_non_epi_meta.tsv", header=T, sep="\t", as.is=T, row.names=1)
genes = mat[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(mat[,-1], row.names=genes)
colnames(mat) <- gsub('[.]', '-', colnames(mat))
# Mat has the problem where some of the columns start with an "X", and we need to remove those
mat %>% select(starts_with("X")) -> broken
mat %>% select(!starts_with("X")) -> acceptable
colnames(broken) <- str_sub(colnames(broken),2)
fixed <- cbind(broken,acceptable)
teich_non_epi<- CreateSeuratObject(counts = fixed, project = "Teich_non_epi", meta.data=meta)
saveRDS(teich_non_epi, "Teich_non_epi.RDS")

teich.combined <- merge(teich_epi, y = teich_non_epi, add.cell.ids = c("epi", "non_epi"), project = "teich")
teich.combined
saveRDS(teich.combined, "Teich_combined.RDS")
#obj.list <- SplitObject(teich.combined, split.by = "group")



# Now process the data from the SN/SC human lung data
Convert("human/lung_5loc_sc_sn_cellxgene.h5ad", dest = "h5seurat", overwrite = T)
teich_sc_sn <- LoadH5Seurat("human/lung_5loc_sc_sn_cellxgene.h5seurat")
teich_sc_sn <- read_h5ad("human/lung_5loc_sc_sn_cellxgene.h5ad")

rm(meta,genes,mat, mat_names, broken, fixed, acceptable, data)
```

```{r}
#| label: download the alternate Teichmann data and format 
#| echo: FALSE
# Start with alveoli
mat <- fread("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/EGAS00001002649/Alveoli_exprMatrix.tsv.gz")
meta <- as.data.frame(read.table("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/EGAS00001002649/Alvioli_meta.tsv", header=T, sep="\t", as.is=T, row.names=1))
genes = mat[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(mat[,-1], row.names=genes)
mat_names <- gsub('[.]', '-', colnames(mat))
colnames(mat) <- str_sub(mat_names, end = -3)
rownames(meta) <- str_sub(rownames(meta), end = -3)
teich_alv <- CreateSeuratObject(counts = mat, project = "Teich_alv", meta.data=meta)
saveRDS(teich_alv, "Teich_alv.RDS")

# Next is bronchi
mat <- fread("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/EGAS00001002649/bronchi_exprMatrix.tsv.gz")
meta <- as.data.frame(read.table("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/EGAS00001002649/bronchi_meta.tsv", header=T, sep="\t", as.is=T, row.names=1))
genes = mat[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(mat[,-1], row.names=genes)
mat_names <- gsub('[.]', '-', colnames(mat))
colnames(mat) <- str_sub(mat_names, end = -3)
rownames(meta) <- str_sub(rownames(meta), end = -3)
# Mat has the problem where some of the columns start with an "X", and we need to remove those
mat %>% select(starts_with("X")) -> broken
mat %>% select(!starts_with("X")) -> acceptable
colnames(broken) <- str_sub(colnames(broken),2)
fixed <- cbind(broken,acceptable)
teich_bronch <- CreateSeuratObject(counts = fixed, project = "Teich_bronch", meta.data=meta)
saveRDS(teich_bronch, "Teich_bronch.RDS")

# Last is nasal samples
mat <- fread("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/NALT/Human/EGAS00001002649/nasal_exprMatrix.tsv.gz")
meta <- as.data.frame(read.table("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/NALT/Human/EGAS00001002649/nasal_meta.tsv", header=T, sep="\t", as.is=T, row.names=1))
genes = mat[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(mat[,-1], row.names=genes)
mat_names <- gsub('[.]', '-', colnames(mat))
colnames(mat) <- str_sub(mat_names, 2)
teich_nasal <- CreateSeuratObject(counts = mat, project = "Teich_nasal", meta.data=meta)
saveRDS(teich_nasal, "Teich_nasal.RDS")
rm(genes, mat_names,mat,meta, fixed, broken, acceptable)

teich_nasal <- readRDS("Teich_nasal.RDS")
teich_nasal$author <- "Teichmann"
teich_nasal$organism <- "mouse"
saveRDS(teich_nasal, "h_nasal_teich.RDS")
teich_bronch <- readRDS("Teich_bronch.RDS")
teich_bronch$author <- "Teichmann"
teich_bronch$organism <- "mouse"
saveRDS(teich_bronch, "h_bronch_teich.RDS")
teich_alv <- readRDS("Teich_alv.RDS")
teich_alv$author <- "Teichmann"
teich_alv$organism <- "mouse"
saveRDS(teich_alv, "h_alv_teich.RDS")
```

```{r}
#| label: Process the Tiechman single cell and nuclei human data
#| echo: FALSE
data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Human/PRJEB52292/matrix_files")
meta <- read.csv("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Human/PRJEB52292/metadata.csv")
rownames(meta) <- meta$X
meta <- meta[,-1]
teich_hlung_sc_sn <-CreateSeuratObject(data, meta.data = meta)
teich_hlung_sc_sn[[]]
teich_hlung_sc_sn$author <- "Teich_sc_sn"
teich_hlung_sc_sn$organism <- "human"
saveRDS(teich_hlung_sc_sn, "human/teich_sc_sn.RDS")
```

```{r}
#| label: Generate the Human Adipose scRNA set Seurat from Rosen 
#| echo: FALSE
data <- Read10X("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Adipose/Human/GSE176171_Mixed_BMI")  
# Note: the metadata file also contains the metadata for the mouse samples
meta = as.data.frame(read.table("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Adipose/Human/GSE176171_Mixed_BMI/metadata.tsv.gz", header=T, sep="\t", as.is=T,quote = "", row.names=1))
h_fat_rosen <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "h_fat_rosen", meta.data = meta)
saveRDS(h_fat_rosen, "h_fat_rosen.RDS")

# Generate the Rosen Mouse Adipose Seurat Object
data <- Read10X("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Adipose/Mouse/GSE176171")  
# Note: the metadata file also contains the metadata for the mouse samples
meta = as.data.frame(read.table("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Adipose/Mouse/GSE176171/GSE176171_cell_metadata.tsv.gz", header=T, sep="\t", as.is=T,quote = "", row.names=1))
m_fat_rosen <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_fat_rosen", meta.data = meta)
saveRDS(m_fat_rosen, "m_fat_rosen.RDS")
```

```{r}
#| label: Generate the Obese Human Adipose scRNA Seurat from Grundberg 
#| echo: FALSE
data <- Read10X("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Adipose/Human/GSE129363_Obsese_Indivs")  
# Note: the metadata file also contains the metadata for the mouse samples
meta = as.data.frame(read.table("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Adipose/Human/GSE129363_Obsese_Indivs/CellAnnotation.txt.gz", header=T, sep="\t", as.is=T,quote = "", row.names=1))
h_fat_grund <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "h_fat_grund", meta.data = meta)
saveRDS(h_fat_grund, "h_fat_grundberg.RDS")

```

```{r}
#| label: Load the human blood samples from Krasnow
#| echo: FALSE
# Patient 1
load("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Spleen:Blood/Human/EGAS00001004333/droplet_normal_lung_blood_seurat_ntiss10x.P1.anno.20191002.RC4.Robj")
h_blood_kras_1 <- ntiss10x.P1.anno
rm(ntiss10x.P1.anno)
h_blood_kras_1 <- UpdateSeuratObject(h_blood_kras_1)
saveRDS(h_blood_kras_1, "h_blood_kras1.RDS")
# Patient 3
load("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Spleen:Blood/Human/EGAS00001004333/droplet_normal_lung_blood_seurat_ntiss10x.P3.anno.20191002.RC4.Robj")
h_blood_kras_3 <- ntiss10x.P3.anno
rm(ntiss10x.P3.anno)
h_blood_kras_3 <- UpdateSeuratObject(h_blood_kras_3)
saveRDS(h_blood_kras_3, "h_blood_kras3.RDS")
```

```{r}
#| label: Load the Lung  samples from Krasnow
#| echo: FALSE
# Load mouse sample
load("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/EGAS00001004333/mouse_droplet_TMS_tiss10x.mouse.anno.ncbi.20200222.RC4.Robj")
m_lung_kras <- tiss10x.mouse.anno
m_lung_kras <- UpdateSeuratObject(m_lung_kras)
rm(tiss10x.mouse.anno)
m_lung_kras$author <- "krasnow"
m_lung_kras$organism <- "mouse"
saveRDS(m_lung_kras, "m_lung_kras.RDS")
# Load human sample
load("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/EGAS00001004333/droplet_normal_lung_seurat_ntiss10x.P2.anno.20191002.RC4.Robj")
h_lung_kras <- ntiss10x.P2.anno
rm(ntiss10x.P2.anno)
h_lung_kras <- UpdateSeuratObject(h_lung_kras)
saveRDS(h_lung_kras, "h_lung_kras.RDS")
h_lung_kras <- readRDS("h_lung_kras.RDS")
h_lung_kras$author <- "krasnow"
h_lung_kras$organism <- "human"
saveRDS(h_lung_kras, "h_lung_kras.RDS")

## Try to extract count data, then generate new assay and obj for human orthologs
# the metadata from 10x has an extra X at the beginning of the colnames (7385 - 24618)
meta <- read.csv("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/EGAS00001004333/mouse_droplet_TMS_metadata.csv")
rownames(meta) <- meta$X
meta <- meta[-1]

# Extract count data, then generate new assay
m_lung_kras <- readRDS("mouse/m_lung_kras.RDS")
counts <- GetAssayData(object = m_lung_kras, slot = "counts")
hu_genes <- mouse_to_human(counts@Dimnames[[1]], conv_table)
counts@Dimnames[[1]] <- hu_genes$human_ortho
new_obj <- CreateAssayObject(counts, min.cells = 3, min.features = 2000)
m_lung_kras_h <- CreateSeuratObject(new_obj, meta.data = meta, assay = "RNA", min.cells = 3, min.features = 2000, project = "m_lung_kras")
m_lung_kras_h$author <- "krasnow"
m_lung_kras_h$organism <- "mouse"
saveRDS(m_lung_kras_h, "mouse_as_human/m_lung_kras_h.RDS")
```

```{r}
#| label: Load the murine Lung samples from Lukas/Angelidis
#| echo: FALSE
load("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE124872/GSE124872_raw_counts_single_cell.RData")
meta <- read.table("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE124872/GSE124872_Angelidis_2018_metadata.csv", header=T, sep=",", as.is=T,quote = "", row.names=1)
# The metadata rownames and counts colnames are mismatched
rownames(meta) <- raw_counts@Dimnames[[2]]
# Make mouse object
m_lung_angel <-CreateSeuratObject(raw_counts, min.cells = 3, min.features = 200, project = "m_lung_angelidis", meta.data = meta)
m_lung_angel$author <- "Angelidis"
m_lung_angel$organism <- "mouse"
saveRDS(m_lung_angel, "m_lung_angelidis.RDS")

# now generate the orthologous object
mouse_genes <- as.data.frame(raw_counts@Dimnames[[1]])
hu_genes <- mouse_to_human(raw_counts@Dimnames[[1]], conv_table)
raw_counts@Dimnames[[1]] <- hu_genes$human_ortho
m_lung_angel_h <-CreateSeuratObject(raw_counts, min.cells = 3, min.features = 200, project = "m_lung_angelidis_h", meta.data = meta)

m_lung_angel_h$author <- "Angelidis"
m_lung_angel_h$organism <- "mouse"
saveRDS(m_lung_angel_h, "mouse_as_human/m_lung_angelidis_h.RDS")
rm(raw_counts,meta, hu_genes)
```

```{r}
#| label: Load the human Lung samples from Tata
#| echo: FALSE
h_lung_endo_tata <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/GSE178360/GSE178360_endo.sub_SAE10x3.integrated_temp_v2.RDS")
h_lung_epi_tat <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/GSE178360/GSE178360_epi.sub_SAE10x3.integrated_v2.RDS")
h_lung_immune_tata <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/GSE178360/GSE178360_immune_platelet.sub_SAE10x3.integrated_temp.RDS")
h_lung_mes_tat <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/GSE178360/GSE178360_mes.sub_SAE10x3.integrated_v2.RDS")
saveRDS(h_lung_endo_tata, "h_lung_endo_tata.RDS")
saveRDS(h_lung_epi_tat, "h_lung_epi_tat.RDS")
saveRDS(h_lung_immune_tata, "h_lung_immune_tata.RDS")
saveRDS(h_lung_mes_tat, "h_lung_mes_tat.RDS")
h_lung_endo_tata <- readRDS("h_lung_endo_tata.RDS")
h_lung_epi_tat <- readRDS("h_lung_epi_tat.RDS")
h_lung_immune_tata <- readRDS("h_lung_immune_tata.RDS")
h_lung_mes_tat <- readRDS("h_lung_mes_tat.RDS")
h_lung_endo_tata$author <- "Tata"
h_lung_epi_tat$author <- "Tata"
h_lung_immune_tata$author <- "Tata"
h_lung_mes_tat$author <- "Tata"
saveRDS(h_lung_endo_tata, "h_lung_endo_tata.RDS")
saveRDS(h_lung_epi_tat, "h_lung_epi_tat.RDS")
saveRDS(h_lung_immune_tata, "h_lung_immune_tata.RDS")
saveRDS(h_lung_mes_tat, "h_lung_mes_tat.RDS")
```

```{r}
#| label: Load the human Lung samples from Habermann
#| echo: FALSE
h_lung_haber <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/GSE135893/GSE135893_ILD_annotated_fullsize.RDS")
h_lung_haber <- UpdateSeuratObject(h_lung_haber)
h_lung_haber$author <- "Habermann"
# This data includes lots of samples with diseased tissue, we will subset only the healthy controls - will do this on CHTC because requires too much RAM
#h_lung_haber$celltype <- Idents(h_lung_haber)
#Idents(h_lung_haber) <- "Diagnosis"
#health_haber_cells <- WhichCells(h_lung_haber, idents = "Control")
#test <- subset(h_lung_haber, cells =  health_haber_cells)
saveRDS(h_lung_haber, "h_lung_haber.RDS")
```

```{r}
#| label: Load the human Lung samples from Stripp
#| echo: FALSE
h_lung_strip <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/GSE160664/GSE160664.rds") 
saveRDS(h_lung_strip, "h_lung_strip.RDS")
h_lung_strip <- readRDS("h_lung_strip.RDS")
h_lung_strip$author <- "Stripp"
saveRDS(h_lung_strip, "h_lung_strip.RDS")

#test
```

```{r}
#| label: Load the human Lung samples from Okuda
#| echo: FALSE
h_lung_okuda <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Human/GSE160673/GSE160673_Ken_7scRNAseq_mt20_merged16labeled_seurat.RDS") 
h_lung_okuda <- UpdateSeuratObject(h_lung_okuda)
#saveRDS(h_lung_okuda, "h_lung_okuda.RDS")
#h_lung_okuda <- readRDS("h_lung_okuda.RDS")
h_lung_okuda$author <- "Okuda"
saveRDS(h_lung_okuda, "h_lung_okuda.RDS")
```

```{r}
#| label: Load the mouse Lung samples from Raredon
#| echo: FALSE
# Start with the female mouse
counts <- fread("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Mouse/GSE133747/female_mouse/matrix.mtx.gz")
barcodes <- fread("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Mouse/GSE133747/female_mouse/original/barcodes.tsv.gz")
genes <- fread("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Mouse/GSE133747/female_mouse/original/features.tsv.gz")
# here we find that the barcodes.tsv.gz  and genes.tsv files have headers that we need to remove
df1 <-  as.data.frame(barcodes[2:nrow(barcodes),])
write.table(df1, file = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Mouse/GSE133747/female_mouse/barcodes.tsv", row.names=FALSE, col.names = F, sep="\t")
# gzip this in terminal 
df2 <-  as.data.frame(genes[2:nrow(genes),])
write.table(df2, file = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Mouse/GSE133747/female_mouse/features.tsv", row.names=FALSE, col.names = F, sep="\t")
# gzip this in terminal 
m_lung_rare_f <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE133747/female_mouse")
m_lung_rare_f <-CreateSeuratObject(m_lung_rare_f, min.cells = 3, min.features = 200, project = "m_lung_rare_f")
m_lung_rare_f$author <- "Raredon"
saveRDS(m_lung_rare_f, "m_lung_rare_f.RDS")


# Now do the male mouse
counts <- fread("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Mouse/GSE133747/male_mouse/matrix.mtx.gz")
barcodes <- fread("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Mouse/GSE133747/male_mouse/original/barcodes.tsv.gz")
genes <- fread("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Mouse/GSE133747/male_mouse/original/features.tsv.gz")
# here we find that the barcodes.tsv.gz  and genes.tsv files have headers that we need to remove
df1 <-  as.data.frame(barcodes[2:nrow(barcodes),])
write.table(df1, file = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Mouse/GSE133747/male_mouse/barcodes.tsv", row.names=FALSE, col.names = F, sep="\t")
# gzip this in terminal 
df2 <-  as.data.frame(genes[2:nrow(genes),])
write.table(df2, file = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/sc_RNA_datasets/Lung/Mouse/GSE133747/male_mouse/features.tsv", row.names=FALSE, col.names = F, sep="\t")
# gzip this in terminal
m_lung_rare_m <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE133747/male_mouse")
m_lung_rare_m <-CreateSeuratObject(m_lung_rare_m, min.cells = 3, min.features = 200, project = "m_lung_rare_m")
m_lung_rare_m$author <- "Raredon"
saveRDS(m_lung_rare_m, "m_lung_rare_m.RDS")


# Now repeat this to make the human orthologs
m_lung_rare_f <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE133747/female_mouse")
hu_genes <- mouse_to_human(rownames(m_lung_rare_f), conv_table)
rownames(m_lung_rare_f) <- hu_genes$human_ortho
m_lung_rare_f_h <-CreateSeuratObject(m_lung_rare_f, min.cells = 3, min.features = 200, project = "m_lung_rare_f")
m_lung_rare_f_h$author <- "Raredon"
m_lung_rare_f_h$organism <- "mouse"
saveRDS(m_lung_rare_f_h, "mouse_as_human/m_lung_rare_f_h.RDS")

m_lung_rare_m <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE133747/male_mouse")
hu_genes <- mouse_to_human(rownames(m_lung_rare_m), conv_table)
rownames(m_lung_rare_m) <- hu_genes$human_ortho
m_lung_rare_m_h <-CreateSeuratObject(m_lung_rare_m, min.cells = 3, min.features = 200, project = "m_lung_rare_m")
m_lung_rare_m_h$author <- "Raredon"
m_lung_rare_m_h$organism <- "mouse"
saveRDS(m_lung_rare_m_h, "mouse_as_human/m_lung_rare_m_h.RDS")

rm(m_lung_angel_h, m_lung_rare_f, m_lung_rare_f_h, m_lung_rare_m, m_lung_rare_m_h, meta, raw_counts, hu_genes)
```

```{r}
#| label: Load the mouse Lung samples from Sampath
#| echo: FALSE
data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE164621_RAW/mouse2")
m_lung_sam2 <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_sam2")
m_lung_sam2$author <- "Sampath"
saveRDS(m_lung_sam2, "m_lung_sam2.RDS")

data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE164621_RAW/mouse3")
m_lung_sam3 <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_sam3")
m_lung_sam3$author <- "Sampath"
saveRDS(m_lung_sam3, "m_lung_sam3.RDS")

data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE164621_RAW/mouse4")
m_lung_sam4 <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_sam4")
m_lung_sam4$author <- "Sampath"
saveRDS(m_lung_sam4, "m_lung_sam4.RDS")
rm(m_lung_sam2, m_lung_sam3,m_lung_sam4)


# Now repeat this to create the ortholog mapped objects
data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE164621_RAW/mouse2")
hu_genes <- mouse_to_human(data@Dimnames[[1]], conv_table)
data@Dimnames[[1]] <- hu_genes$human_ortho
m_lung_sam2_h <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_sam2_h")
m_lung_sam2_h$author <- "Sampath"
m_lung_sam2_h$organism <- "mouse"
saveRDS(m_lung_sam2_h, "mouse_as_human/m_lung_sam2_h.RDS")

data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE164621_RAW/mouse3")
hu_genes <- mouse_to_human(data@Dimnames[[1]], conv_table)
data@Dimnames[[1]] <- hu_genes$human_ortho
m_lung_sam3_h <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_sam3_h")
m_lung_sam3_h$author <- "Sampath"
m_lung_sam3_h$organism <- "mouse"
saveRDS(m_lung_sam3_h, "mouse_as_human/m_lung_sam3_h.RDS")

data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE164621_RAW/mouse4")
hu_genes <- mouse_to_human(data@Dimnames[[1]], conv_table)
data@Dimnames[[1]] <- hu_genes$human_ortho
m_lung_sam4_h <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_sam4_h")
m_lung_sam4_h$author <- "Sampath"
m_lung_sam4_h$organism <- "mouse"
saveRDS(m_lung_sam4_h, "mouse_as_human/m_lung_sam4_h.RDS")
```

```{r}
#| label: Load the mouse Lung samples from Koenitzer
#| echo: FALSE
data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE145998/Koenitzer1/filtered_feature_bc_matrix")
m_lung_koenitzer1 <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_koenitzer1")
m_lung_koenitzer1$author <- "koenitzer"
saveRDS(m_lung_koenitzer1, "m_lung_koenitzer1.RDS")

data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE145998/Koenitzer2/filtered_feature_bc_matrix")
m_lung_koenitzer2 <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_koenitzer2")
m_lung_koenitzer2$author <- "koenitzer"
saveRDS(m_lung_koenitzer2, "m_lung_koenitzer2.RDS")

data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE145998/Koenitzer3/filtered_feature_bc_matrix")
m_lung_koenitzer3 <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_koenitzer3")
m_lung_koenitzer3$author <- "koenitzer"
saveRDS(m_lung_koenitzer3, "m_lung_koenitzer3.RDS")
rm(m_lung_koenitzer1, m_lung_koenitzer2,m_lung_koenitzer3,data)

# Now repeat for orthologs
data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE145998/Koenitzer1/filtered_feature_bc_matrix")
hu_genes <- mouse_to_human(data@Dimnames[[1]], conv_table)
data@Dimnames[[1]] <- hu_genes$human_ortho
m_lung_koenitzer1_h <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_koenitzer1_h")
m_lung_koenitzer1_h$author <- "koenitzer"
m_lung_koenitzer1_h$organism <- "mouse"
saveRDS(m_lung_koenitzer1_h, "mouse_as_human/m_lung_koenitzer1_h.RDS")

data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE145998/Koenitzer2/filtered_feature_bc_matrix")
hu_genes <- mouse_to_human(data@Dimnames[[1]], conv_table)
data@Dimnames[[1]] <- hu_genes$human_ortho
m_lung_koenitzer2_h <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_koenitzer2_h")
m_lung_koenitzer2_h$author <- "koenitzer"
m_lung_koenitzer2_h$organism <- "mouse"
saveRDS(m_lung_koenitzer2_h, "mouse_as_human/m_lung_koenitzer2_h.RDS")

data <- Read10X("/Users/alexwhitehead/sc_RNA_raw_data/Lung/Mouse/GSE145998/Koenitzer3/filtered_feature_bc_matrix")
hu_genes <- mouse_to_human(data@Dimnames[[1]], conv_table)
data@Dimnames[[1]] <- hu_genes$human_ortho
m_lung_koenitzer3_h <-CreateSeuratObject(data, min.cells = 3, min.features = 200, project = "m_lung_koenitzer3_h")
m_lung_koenitzer3_h$author <- "koenitzer"
m_lung_koenitzer3_h$organism <- "mouse"
saveRDS(m_lung_koenitzer3_h, "mouse_as_human/m_lung_koenitzer3_h.RDS")
```

### Lets look at all the samples we have generated

```{r}
#| label: Load the Seurat objects, last 4 of GEO/EGA ID in comment
#| echo: FALSE
# Read in the lung samples, 6 human, 2 mouse
# h_bronch_teich <- readRDS("Teich_bronch.RDS") #E2649
# h_alv_teich <- readRDS("Teich_alv.RDS") #E2649
# h_lung_kras <- readRDS("h_lung_kras.RDS") #E4344
# h_lung_strip <- readRDS("h_lung_strip.RDS") #0664
# h_lung_haber <- readRDS("h_lung_haber.RDS") #5893
# h_lung_okuda <- readRDS("h_lung_okuda.RDS") #0673
# h_lung_endo_tata <- readRDS("h_lung_endo_tata.RDS") #8360
# h_lung_epi_tat <- readRDS("h_lung_epi_tat.RDS") #8360
# h_lung_immune_tata <- readRDS("h_lung_immune_tata.RDS") #8360
# h_lung_mes_tat <- readRDS("h_lung_mes_tat.RDS") #8360
# m_lung_agilidis <- readRDS("m_lung_anglidis.RDS") #4872
# m_lung_kras <- readRDS("m_lung_kras.RDS") #E4344
# m_lung_rare_m <- readRDS("m_lung_rare_m.RDS") #3747
# m_lung_rare_f <- readRDS("m_lung_rare_f.RDS") #3747
# m_lung_sam2 <- readRDS("m_lung_sam2.RDS") #4621
# m_lung_sam3 <- readRDS("m_lung_sam3.RDS") #4621
# m_lung_sam4 <- readRDS("m_lung_sam4.RDS") #4621
# # Read in the nasal samples
# h_nasal_teich <- readRDS("Teich_nasal.RDS") #E2649
# 
# # Read in the adispose samples
# h_fat_rosen <- readRDS("h_fat_rosen.RDS") #6171
# m_fat_rosen <- readRDS("m_fat_rosen.RDS") #6171
# h_fat_grund <- readRDS("h_fat_grundberg.RDS") #6171
# # Read in the blood/spleen samples
# h_blood_kras_1 <- readRDS("h_blood_kras1.RDS") #E4344
# h_blood_kras_3 <- readRDS("h_blood_kras3.RDS") #E4344

```

## Assign cell types to each cluster

```{r}
#| label: Label clusters in the murine combined object
#| echo: FALSE
mlung.markers <- read.csv("mouse/mlung.combined.markers.csv")
mlung.combined <- readRDS("mouse/m_lung_combined.RDS")

# Here are what the clusters are:
# Cluster 0 = Scgb1A1/3 - Secretory/Club Cells
# Cluster 1 = Cldn5, Pecam1, cd36, Plvap - endothelial cells (gCap)
# Cluster 2 = Lyz1, Lyz2, Apoe, S100a4, Ccr2 - Monocytes (classical and non)
# Cluster 3 = Gsn, Col3a1, Col1a1,Pdgfra - Stromal/ Fibroblast
# Cluster 4 = Chil3, Chil3l3, Lyz2, CD44, Mertk - Alveolar Macs
# Cluster 5 = Sftpc, Sftpb - Alv Type2
# Cluster 6 = Ccl5, Il7r, Nkg7 - T Cells
# Cluster 7 = CD74, Ighm - B Cells
# Cluster 8 = Hdc, S100a8, Retnlg, Cxcl2 - Trem2 Macs + Phils + Mast (Granulocytes)
# Cluster 9 = Col4a4/3, Sema3a, Shroom3, Cldn18, Cdh13 - Alv Type 1
# Cluster 10 = Prickle2, Icam2, Ly6a, CD36, PECAM1 - Endothelial/Aerocyte (aCap)
# Cluster 11 = Spag17, Foxj1, Dnah9 - Cilliated Cells
# Cluster 12 = Scgb1a1, Col23a1, Atp2b2, Nwd2 - Club Cells + Goblet Cells
# Cluster 13 = Postn, Spp1, Col4, - More Stromal/Pericyte
# Cluster 14 = H2-ab1, H2, Ccr2 - Mo-Dendritic Cells
# Cluster 15 = Gzma, klrd1, Nkg7, klre1 - NK Cells
# Cluster 16 = h2afz, Chil3l3, Ly6c2 - Mo-Macrophages
# Cluster 17 = Cd74, Flt1, H2, Ctss - Interstitial Macrophages
# Cluster 18 = Rln, Col3, Tagln - Smooth Muscle
# Cluster 19 = Flt1, S100a4, Ly6c2, Plac8 - Monocytes
# Cluster 20 = C3, Sulf1, Mast4, Dcn - Mesothelial Cells
# Clutter 21 = Sftpb -Alv Type 2
# Cluster 22 = Lymphatic Endo?
# Cluster 23 = ccl3/4/9, Cd7, Hdc, Il6 - Mast? Eosinophils? Basophils? (Granulocytes)
# Cluster 24 = Secretory/Club
# Cluster 25 = Secretory/Club
# Cluster 26 = Secretory/Club
# Cluster 27 = Secretory/Club

mlung.combined <- RenameIdents(mlung.combined, 
                         `0` = "Secretory/Club", 
                         `1` = "Endothelial", 
                         `2` = "Monocytes/DC/Mac",
                         `3` = "Stromal/Fibroblast", 
                         `4` = "Alv_Macrophages",
                         `5` = "Alv_Type_2", 
                         `6` = "T_Cells",
                         `7` = "B_Cells",
                         `8` = "Granulocytes", 
                         `9` = "Alv_Type_1", 
                         `10`= "Endothelial",
                         `11`= "Cilliated",
                         `12`= "Goblet/Club",
                         `13`= "Stromal/Pericyte", 
                         `14`= "Mo-DCs",
                         `15`= "NK",
                         `16`= "Mo-Mac",
                         `17`= "Interstitial_Macs", 
                         `18`= "Smooth_Muscle",
                         `19`= "Monocytes",
                         `20`= "Mesothelial_Cells",
                         `21`= "Alv_Type_2",
                         `22`= "Endothelial",
                         `23`= "Granulocytes",
                         `24`= "Secretory/Club",
                         `25`= "Secretory/Club",
                         `26`= "Secretory/Club",
                         `27`= "Secretory/Club")

mlung.combined$CellTypes <- Idents(mlung.combined)
table(Idents(mlung.combined))

DimPlot(mlung.combined, label = T)
# Compare with original author annotations
# Idents(mlung.combined) <- "celltype"
# DimPlot(mlung.combined, label = T)
# Idents(mlung.combined) <- "free_annotation"
# DimPlot(mlung.combined, label = T)
# Idents(mlung.combined) <- "CellTypes"
# Idents(mlung.combined) <- "seurat_clusters"

# Set the rna values to normalized 
DefaultAssay(mlung.combined) <- "SCT"

# Remove the dividing cell clusters
#mlung.combined <- subset(mlung.combined, idents = c("Dividing_Cells_2","Dividing_Cells_1"), invert = TRUE)

# Save the filtered data
saveRDS(mlung.combined, "mouse/mlung.combined.filtered.RDS")

mlung <- readRDS("mouse/mlung.combined.filtered.RDS")

# Lets see if we can export the counts and metadata from the combined object, the convert the mouse genes into human genes, and reassemble the seurat object, cluster, etc. 
# Extract count data, then generate new assay
mlung.combined <- readRDS("mouse/mlung.combined.filtered.RDS")
DefaultAssay(mlung.combined) <- 'RNA'
write.csv(mlung.combined@meta.data, "mouse/m_lung_metadata.csv")
counts <- GetAssayData(object = mlung.combined, slot = "data", assay = "RNA")
meta <- read.csv("mouse/m_lung_metadata.csv", row.names = 'X')
# remove erroneous metadata
meta <- meta[,c(1,2,3,15,17,18,28)]
hu_genes <- mouse_to_human(counts@Dimnames[[1]], conv_table)
counts@Dimnames[[1]] <- hu_genes$human_ortho
new_obj <- CreateAssayObject(counts)
mlungh <- CreateSeuratObject(new_obj, meta.data = meta, assay = "RNA", project = "m_lung_h")

#Rip and rename the other assays too
DefaultAssay(mlung.combined) <- 'integrated'
counts <- GetAssayData(object = mlung.combined, slot = "data", assay = "integrated")
hu_genes <- mouse_to_human(counts@Dimnames[[1]], conv_table)
counts@Dimnames[[1]] <- hu_genes$human_ortho
new_obj <- CreateAssayObject(counts)
mlungh[["integrated"]] <- new_obj

# Finally do this for the SCT assay
DefaultAssay(mlung.combined) <- 'SCT'
counts <- GetAssayData(object = mlung.combined, slot = "data", assay = "SCT")
hu_genes <- mouse_to_human(counts@Dimnames[[1]], conv_table)
counts@Dimnames[[1]] <- hu_genes$human_ortho
new_obj <- CreateAssayObject(counts)
mlungh[["SCT"]] <- new_obj
saveRDS(mlungh, "mouse_as_human/mlungh_ripped.RDS")

# This then gets sent to the CHTC for reclustering and marker identification
```

Repeat this process for the human samples

```{r}
#| label: Label clusters in the human combined object
#| echo: FALSE

## Use the new object with the Teichmann SC/SN data
hlung.markers <- read.csv("human/hlung.combined.markers.csv")
hlung <- readRDS("human/h_lung_combined.RDS") 
DefaultAssay(hlung) <- "SCT"
DimPlot(hlung, label = T, split.by = 'author') # The integration seems to have worked well
DimPlot(hlung, label = T)
# Here are what the clusters are:
# Cluster 0 = HLA-DR, MARCO, CD68 - Alveolar Macrophages
# Cluster 1 = CLDN5, PECAM1 - Endothelial Cells, Vascular
# Cluster 2 = IL32, CCL5, CD3, NGK7 - T cells, CD4+, CD8+, gdT, ILC, MAIT,NKT
# Cluster 3 = S100A8, CTSS, Lyz, HLA-DR, CD68 - Monocyte, Macrophages + DCs
# Cluster 4 = FOXJ1, CAPS, TPP3, SNTN - Cilliated
# Cluster 5 = SFTPC/A/B - Alv Type 2
# Cluster 6 = MUC5AC, SCGB3A1/1A1, MSMB - Goblet - Secretory Cells, some Ionocyte
# Cluster 7 = KRT17, KRT19 - Basal Cells
# Cluster 8 = GNLY, NKG7, CD7, CD69 - T Cells, NK Cells
# Cluster 9 =  DCN, LUM, COl1A1, Col6A1 - Fibroblasts, Mesothelial, SMC
# Cluster 10 = LAMA2, SLIT2, ROBO2, ACAN, COl1A2 - Chrondrocytes, Fibroblasts, schwann
# Cluster 11 = CFTR, STFPC - AT2 + ionocyte
# Cluster 12 = PTPRC, CLB, CD247 (CD3z), CD96 - Mainly NK, but T cells also, etc
# Cluster 13 = PECAM1, CLDN5, HLA-E, B2M, SPARC - Endothelial, Vasc, Cap a 
# Cluster 14 = Muc5b, foxp1 - SMG Mucosal Cells
# Cluster 15 = Lama3, Col8A1, FOXP1, AGER - AT1
# Cluster 16 = TAGLN, ACTA2 - SMCs
# Cluster 17 = MS4A1, CD79A, CD86 - Basal Cells, Goblet, Secretory Club + Goblet, Mucous, ionocyte
# Cluster 18 = Mainly Mono/Mac, some DCs
# Cluster 19 = DCN, Col3a1, Col1A2, SPARC, DMBT1 - Fibroblasts, SMG Ductal Cells, Serous
# Cluster 20 = HDC, CPA3, Ly6a, Ly6c1, Lyve1, S1PR1, CD36 - Mast Cells
# CLuster 21 = LYVE1, Spag17, CCL21 - Lyphatic Endothelial
# Cluster 22 = PECAM1, MT-, ELN, COl4A1, SPARC - Capillary Endothelial
# Cluster 23 = Rpl genes - Memory B Cells, Naive B Cells
# Cluster 24 = SCGB1A1/3A1, TPPP3 - More Secretory Cells
# Cluster 25 = IGHM, CD79B, CD79A, CD74 - Plasma Cells, IgA, IgG, some RBCs
# Cluster 26 = Chi3l3, Lyz.1, CCL23 - More Smooth Muscle
# Cluster 27 = DMBT1 - SMG Serous
# Cluster 28 = More Lymphatic Endothelial

hlung$seurat_clusters <- Idents(hlung)
hlung <- RenameIdents(hlung,
                         `0` = "Alveolar Macrophages",
                         `1` = "Endothelial_Cells_Vascular",
                         `2` = "T_NK_MAIT",
                         `3` = "Mono_Mac_DC",
                         `4` = "Cilliated",
                         `5` = "Alv_Type_2",
                         `6` = "Secretory/Ionocyte",
                         `7` = "Basal",
                         `8` = "T/NK",
                         `9` = "Stromal",
                         `10`= "Chondro_Fibro_Schwann",
                         `11`= "Alv_Type_2/Iono",
                         `12`= "NK",
                         `13`= "Endothelial_cells_Cap_a",
                         `14`= "SMG_Mucosal",
                         `15`= "AT1",
                         `16`= "SMCs",
                         `17`= "Basal/Goblet/Club",
                         `18`= "Mono_Mac",
                         `19`= "Fibroblasts/SMG_Ductal/Serous",
                         `20`= "Mast",
                         `21`= "Lymphatic_Endothelial",
                         `22`= "Endothalial_Capillary",
                         `23`= "B_Cells",
                         `24`= "Secretory_Cells",
                         `25`= "Plasma_Cells",
                         `26`= "SMCs",
                         `27`= "SMG_Serous",
                         `28`= "Lymphatic_Endothelial")
hlung$CellType_AW <- Idents(hlung)
saveRDS(hlung, "human/hlung_anno.RDS")

hCil<- subset(hlung, idents = "Cilliated")
saveRDS(hCil, "human/cilliated.RDS")
```

And finally repeat this for the mouse as human samples

```{r}
#| label: Label clusters in the mouse-as-human combined object
#| echo: FALSE
mlungh.markers <- read.csv("mouse_as_human/mlungh_markers.csv")
mlungh.combined <- readRDS("mouse_as_human/mlungh_ripped_sct.RDS") 

DefaultAssay(mlungh.combined) <- "SCT"
# Scroll down to see that the cluster 18 is dividing cells
#
DimPlot(mlungh.combined, label = T)

# Get rid of the "integrated" assay to save a lot of space
mlungh <- DietSeurat(mlungh.combined, assays = c("RNA","SCT"), dimreducs = c("pca","umap"))

saveRDS(mlungh, "mouse_as_human/mlungh.RDS")

test <- table(mlungh$seurat_clusters, mlungh$CellTypes)
write.csv(test, "mlungh_cell_types.csv")

# Find the cell types for each cluster
# Here are what the clusters were:
# Cluster 0 = SCGB1A1 - Secretory/Club
# Cluster 1 = PECAM1, CDH5 - Endothelial
# Cluster 2 = SFTPC - Alv Type 2 
# Cluster 3 = Ccl5, CD28, Il7R - T Cells
# Cluster 4 = Plac8, S100a4, Apoe, Ly6c2 - Monocytes/DC/Mac
# Cluster 5 = Mertk - Alveolar macrophages
# Cluster 6 = MGP, Col1a1, DCN - Stromal/Fibroblast + Mesthoelial
# Cluster 7 = IGHM, CD79 - B Cells
# Cluster 8 = COL23, Col4a1, Col4a2 - Stromal
# Cluster 9 = POSTN, SPP1, SPARC - Stromal
# Cluster 10 = HDC, CXCL2, IL1b, A100a8/9 - Granulocytes + Mast Cells
# Cluster 11 = AGER, Col4, CAV1, SEMA3E - AT1
# Cluster 12 = PRICKLE2, CLDN5, PECAM1 - Endothelial
# Cluster 13 = Ly6c, PLAC8, PCER1G - Mono/Mac
# Cluster 14 = ELN, Col3, TAGLN - SMCs
# Cluster 15 = Spag17, Spag16 - Cilliated Cells
# Cluster 16 = H2, CD74, CCL17,CD209 - DCs
# Cluster 17 = CCL5, Lyz.1, NKG7, IL2RB, KLRa9 - NK Cells
# Cluster 18 = HMGB2, TOP2A, MKI67 - Dividing
# Cluster 19 = APOE, H2, CD74, Saa3, FCER1G, FCGR2A - Trem2 Macs
# Cluster 20 = SCGB1A1 - Club/Secretory Cells
# CLuster 21 = CCL23, CD44, SIRPA, MERTK - Alveolar Macs

# Get rid of dividing cluster

mlungh <- readRDS("mouse_as_human/mlungh.RDS")
# mlungh <- RenameIdents(mlungh, 
#                          `0` = "Secretory/Club", 
#                          `1` = "Endothelial_Cells", 
#                          `2` = "Alv_Type_2",
#                          `3` = "T_Cells", 
#                          `4` = "Mono_Mac",
#                          `5` = "Alveolar_Macrophages", 
#                          `6` = "Stromal_Mesothelial",
#                          `7` = "B_Cells",
#                          `8` = "Stromal", 
#                          `9` = "Stromal", 
#                          `10`= "Granulocyte_and_Mast",
#                          `11`= "Alv_Type_1",
#                          `12`= "Endothelial",
#                          `13`= "Mono_Mac", 
#                          `14`= "SMCs",
#                          `15`= "Cilliated_Cells",
#                          `16`= "DCs",
#                          `17`= "NK_Cells", 
#                          `19`= "Trem2_Macs",
#                          `20`= "Secretory/Club",
#                          `21` = "Alveolar_Macrophages")

mlungh <- subset(mlungh, idents = '18', invert = T)
DimPlot(mlungh, label = T)

mlungh$m_to_h_reclust <- Idents(mlungh)
Idents(mlungh) <- "CellTypes"

DimPlot(mlungh, label = T)
# Renaming genes seems to have minimally impacted clustering
saveRDS(mlungh, "mouse_as_human/mlungh_filtered.RDS")
mlungh <- readRDS("mouse_as_human/mlungh_filtered.RDS")
```

## Now we can look at different PRRs across tissues and organisms

```{r, include = FALSE}
#| Generate dotplots for PRRs of each cluster
all_genes <- as.data.frame(rownames(mlung.combined))
# Note that assay should be set to "SCT"
TLRs <- c("Tlr1","Tlr2","Tlr3","Tlr4","Tlr5","Tlr6","Tlr7","Tlr8","Tlr9", #"Tlr10",
             "Tlr11","Tlr12","Tlr13")
CLRs <- c("Ly75",    # DEC205/CLEC13b/CD205
             "Clec7a",  # Dectin1
             "Clec4n",  # Dectin2/CLEC6A
             "Clec4e",  # Mincle
             "Clec9a",  # DNGR1
             "Cd209a",   # DC-SIGN
             "Cd209b",
             "Cd209c",
             "Cd209d",
             "Mrc1",    # MR
             "Clec5a",  # MDL-1
             "Clec4d",  # CLEC4D/MCL/Dectin3
             "Clec4a1", #DCIR/CLEC4A
             "Clec4a2",
             "Clec4a3",
             "Cd207",   # Langerin
             "Clec10a") # MGL)
Clecs <- all_genes[grepl("Clec", all_genes$`rownames(mlung.combined)`),]#get all CLEC Genes
#Clecs <- all_genes[grepl("CLEC", all_genes$`rownames(mlung.combined)`),]
Nods <- c("Nod1",
          "Nod2",
          "Nlrc3", # Nod3
          "Nlrc5", # Nod4
          "Nlrx1", # Nod5
          "Ciita")
NLRPs <- c("Nlrp1",
          "Nlrp2",
          "Nlrp3", 
          "Nlrp4", 
          "Nlrp5", 
          "Nlrp6",
          "Nlrp7",
          "Nlrp8",
          "Nlrp9",
          "Nlrp10",
          "Nlrp11",
          "Nlrp12",
          "Nlrp13",
          "Nlrp14")
IPAFs <- c("Nlrc4",
           "Naip1",
           "Naip2",
           "Naip3",
           #"Naip4",
           "Naip5",
           "Naip6",
           "Naip7")
RLRs <- c("Ddx58", # RLR-3/LGP2
          "Ifih1") # MDA5
# More PRRs and sensors from: https://doi.org/10.3389/fimmu.2018.02379
Orphans <- c("Fpr1",# senses formylmethionine on pathogens
            "Il1rl1",# ST2, senses IL-33 alarmin
            "Il6ra",# senses IL6
            "Il6st",# senses Il6
            "Ager",# RAGE receptor
            "Il1r1",# senses Il1b
            "Bsg",# CD147, senses TB, maybe SARS-Cov2?
            "P2ry2",# senses ATP
            "Gpr132",# senses linoleic acid, maybe lysophosphatidyl choline?
            "P2rx7") # purinergic receptor
scav <- c("MARCO",
          "CD36",
          "OLR1", #SR-E1
          "SCARF1",
          "SRCR") # CD5
CR3 <- c("ITGB2", #CD18
         "ITGAM") #CD11b
PRRs <- c(TLRs, CLRs, Clecs, Nods, IPAFs, RLRs, Orphans, scav, CR3)
PRRs <- PRRs[!duplicated(PRRs)] # remove any extra CLRs

# for human
PRRs <- toupper(PRRs)
PRRs <- base::intersect(PRRs, all_genes$`rownames(mlung.combined)`)

ggsave("mouse/outs/mlung_PRRs.pdf",
  plot = DotPlot(mlung.combined, features = PRRs),
  width = 50,
  height = 10,
  device = "pdf",
  limitsize = F)


ggsave("human/outs/hlung_PRRs.pdf",
  plot = DotPlot(hlung.combined, features = PRRs),
  width = 50,
  height = 10,
  device = "pdf",
  limitsize = F)

ggsave("merged_orgs/outs/lung_PRRs.pdf",
  plot = DotPlot(lungs, features = PRRs, group.by = "organism"),
  width = 50,
  height = 10,
  device = "pdf",
  limitsize = F)

ggsave("M_lung_dimplot.pdf",
  plot = DimPlot(mlung.combined, label = T),
  width = 20,
  height = 20,
  device = "pdf",
  limitsize = F)

ggsave("mouse/outs/mlung_PRR_Heatmap.pdf",
       plot = DoHeatmap(subset(mlung.combined, 
                               downsample = 1000), 
                        features = PRRs, 
                        size = 3),
       width = 50,
       height = 10,
       device = "pdf",
       limitsize = F)

ggsave("M_lung_ridgeplot.pdf",
  plot =RidgePlot(mlung.combined, features = PRRs),
  width = 50,
  height = 100,
  device = "pdf",
  limitsize = F)
```

# Notes

##### Let's compare rPCA with and without stripp, and then CCA since the human datasets did not originally cluster very well with rPCA. I also tried Harmony, but the integration did not work very well.

```{r}
# First we will look at the rPCA with stripp
h_rpca.markers <- read.csv("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human_rpca/hlung.combined.markers.csv")
h_rpca <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human_rpca/h_lung_combined.RDS")
DefaultAssay(h_rpca) <- "SCT"
DimPlot(h_rpca, label = T)

# Then we will look at the rPCA without stripp
h_rpca_ns.markers <- read.csv("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human_nostrip_rpca/hlung.combined.markers.csv")
h_rpca_ns <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human_nostrip_rpca/h_lung_combined.RDS")
DefaultAssay(h_rpca_ns) <- "SCT"
DimPlot(h_rpca_ns, label = T)

# Lastly we will loook at the CCA (with stripp)
h_cca.markers <- read.csv("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human_cca/hlung.combined.markers.csv")
h_cca <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human_cca/h_lung_combined.RDS")
DefaultAssay(h_cca) <- "SCT"
DimPlot(h_cca, label = T)

```

RPCA without the stripp samples seems to have best integrated the cells across datasets. Stripp is likely an outlier due to different sample prep and enrichment for basal cells. A few exceptions are: cluster 1 is specific to Okuda (the unidentified cells from their manuscript), and and cluster 10 is the nasal goblet cells that are only found in the Teich nasal data. I ultimately used RPCA, excluded Stripp, and also added the relatively new sc/sn data from the Teich spatial lung paper.

As a note, when performing the clustering on the High-throughput computing system, be sure to use a lot of RAM and only 1-2 CPUs. Increasing CPU count balloons the amount of RAM requested by R.

To make the mlung object with human genes, I tried renaming the genes in each object, then merging, clustering and finding markers. This made cell type identification really difficult. Next, I tried ripping the RNA 'counts' from the merged mlung.combined object, renaming those genes, rebuilding the Seurat object, clustering, and finding markers, but this led to 46 clusters, with no overlap between dataset authors. Then I tried each of the other assays, but ultimately found that I needed to rip each assay individually and rename the genes, followed by adding back each assay individually.

**In the future, we can also try MultiMAP, which will need to be run on the linux CHTC platform. EDIT: first we will try the Seurat V5 implementation of RCPA, CCA, and SCVI for integration with less memory utilization via BPCells**

Note: the implementation of Azimuth makes mapping cell type references onto other data easier:

https://azimuth.hubmapconsortium.org/references/

```{r, results = F}
#| echo: false
hlung <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human/hlung_anno.RDS")

#Delete the unused assays 
hlung[["CFauc"]] <- NULL
hlung[["GOBPauc"]] <- NULL
hlung[["integrated"]] <- NULL

# To use BPCells and Seurat V5 functionality, we need to do a few things first:
# 1. Convert each assay (RNA, integrated, SCT) to a V5 format
# 2. and then generate on-disk matrices for each assay 
# 3. and then link the matrices to the Seurat object and re-save

# Step 1. Convert all assays to V5
#You can add change assays with the following code
hlung[["RNA"]] <- as(object = hlung[["RNA"]], Class = "Assay5")
hlung[["SCT"]] <- as(object = hlung[["SCT"]], Class = "Assay5")

# Step 2. Write each assay to disk for BPCells
write_matrix_dir(mat = hlung[["RNA"]]$counts, dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human/bpcells/RNA")
write_matrix_dir(mat = hlung[["SCT"]]$counts, dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human/bpcells/SCT")

# Read in the matrix as a path and link on-disk counts to Seurat Obejct and re-save
counts.mat <- open_matrix_dir(dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human/bpcells/RNA")
hlung[["RNA"]]$counts <- counts.mat
counts.mat <- open_matrix_dir(dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human/bpcells/SCT")
hlung[["SCT"]]$counts <- counts.mat

# Before we save, let's get rid of extra metadata
index <- c(6,10:51,57:72,74)
names <- list()
for(i in index){
  names[[i]] <- colnames(hlung[[i]])
}
names
for(f in names){
  hlung[[paste(f)]] <- NULL
}

saveRDS(
  object = hlung,
  file = "hlung_v5.Rds",
  destdir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human/bpcells"
)

class(hlung[["RNA"]])
class(hlung[["SCT"]])
hlung

test <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/human/bpcells/hlung_v5.Rds")

test
# An object of class Seurat
# 89055 features across 307482 samples within 2 assays
# Active assay: SCT (37259 features, 0 variable features)
# 3 layers present: data, counts, scale.data
# 1 other assay present: RNA
# 2 dimensional reductions calculated: pca, umap
hlung <- test

# Repeat for mouse object
mlung <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse/mlung.combined.filtered.RDS")

mlung
# An object of class Seurat 
# 80764 features across 185136 samples within 3 assays 
# Active assay: SCT (31269 features, 0 variable features)
#  3 layers present: counts, data, scale.data
#  2 other assays present: RNA, integrated
#  2 dimensional reductions calculated: pca, umap
mlung[["integrated"]] <- NULL
mlung[["RNA"]] <- as(object = mlung[["RNA"]], Class = "Assay5")
mlung[["SCT"]] <- as(object = mlung[["SCT"]], Class = "Assay5")
write_matrix_dir(mat = mlung[["RNA"]]$counts, dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse/bpcells/RNA")
write_matrix_dir(mat = mlung[["SCT"]]$counts, dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse/bpcells/SCT")
counts.mat <- open_matrix_dir(dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse/bpcells/RNA")
mlung[["RNA"]]$counts <- counts.mat
counts.mat <- open_matrix_dir(dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse/bpcells/SCT")
mlung[["SCT"]]$counts <- counts.mat
saveRDS(
  object = mlung,
  file = "mlung_v5.Rds",
  destdir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse/bpcells"
)


mlung <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse/bpcells/mlung_v5.RDS")

mlung

# Now do this for the humanized mouse object
mlungh <- readRDS("/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse_as_human/mlungh_filtered.RDS")
mlungh
mlungh[["RNA"]] <- as(object = mlungh[["RNA"]], Class = "Assay5")
mlungh[["SCT"]] <- as(object = mlungh[["SCT"]], Class = "Assay5")
write_matrix_dir(mat = mlungh[["RNA"]]$counts, dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse_as_human/bpcells/RNA")
write_matrix_dir(mat = mlungh[["SCT"]]$counts, dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse_as_human/bpcells/SCT")
counts.mat <- open_matrix_dir(dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse_as_human/bpcells/RNA")
mlungh[["RNA"]]$counts <- counts.mat
counts.mat <- open_matrix_dir(dir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse_as_human/bpcells/SCT")
mlungh[["SCT"]]$counts <- counts.mat
saveRDS(
  object = mlungh,
  file = "mlungh_v5.Rds",
  destdir = "/Users/alexwhitehead/Documents/Postdoc/Bl_Eng2_Priming/Vax_PRRs/mouse_as_human/bpcells"
)





```

```{r Try mapping mouse onto human locally}
DefaultAssay(mlungh) <- "SCT"
DefaultAssay(hlung) <- "SCT"

mlungh <- NormalizeData(mlungh, verbose = FALSE)
hlung <- NormalizeData(hlung, verbose = FALSE)

mlungh$organism <- "mouse"
hlung$organism <- "human"

lungs <- merge(mlungh,hlung)
lungs <- NormalizeData(lungs)
lungs <- FindVariableFeatures(lungs)
lungs <- ScaleData(lungs)
to_integrate <- Reduce(intersect, list(rownames(hlung), rownames(mlungh)))
lungs <- RunPCA(lungs) # took 3.5ish hours
lungs <- FindNeighbors(lungs, dims = 1:30, reduction = "pca")
lungs <- FindClusters(lungs, resolution = 2, cluster.name = "unintegrated_clusters")
lungs <- RunUMAP(lungs, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")
DimPlot(lungs, reduction = "umap.unintegrated", group.by = "organism")


# Let's try this the traditional way
DefaultAssay(mlungh) <- "SCT"
DefaultAssay(hlung) <- "SCT"
lung_list <- list(mlungh, hlung)
features <- SelectIntegrationFeatures(object.list = lung_list)

lung_list <- PrepSCTIntegration(object.list = lung_list, 
                                  anchor.features = features)
lung_list <- lapply(X = lung_list, FUN = function(x) {
  x <- RunPCA(x, features = features, verbose = FALSE)
})
lung.anchors <- FindIntegrationAnchors(object.list = lung_list, 
                                        anchor.features = features, 
                                        reduction = "cca", 
                                        dims = 1:50, 
                                        k.anchor = 20, 
                                        normalization.method = "SCT")
to_integrate <- Reduce(c, lapply(lung.anchors@object.list, rownames))
lung.combined <- IntegrateData(anchorset = lung.anchors, 
                                features.to.integrate = to_integrate,
                               normalization.method = "SCT",
                               dims = 1:50)
DefaultAssay(lung.combined) <- "SCT"
all_genes <- rownames(lung.combined)
DefaultAssay(lung.combined) <- "integrated"
lung.combined <- ScaleData(lung.combined,
                           features = all_genes,
                           verbose = FALSE)
lung.combined <- RunPCA(lung.combined, 
                         features = all_genes, 
                         npcs = 30)
lung.combined <- RunUMAP(lung.combined, 
                          reduction = "pca", 
                          dims = 1:30)
lung.combined <- FindNeighbors(lung.combined, 
                                reduction = "pca", 
                                dims = 1:30)
lung.combined <- FindClusters(lung.combined, 
                               resolution = 0.3)


# This is the code for the V5 single line integration - didn't work for this
lungs <- IntegrateLayers(
  object = lungs, method = CCAIntegration,
  orig.reduction = "pca", new.reduction = "integrated.cca",
  group.by = "organism", verbose = FALSE, features = to_integrate, assay = "SCT")
#features <- unique(rownames(hlung), rownames(mlungh))


```
